name: CloudBridge CI/CD Pipeline

on:
  push:
    branches: [main, cloudbridge-platform]
  pull_request:
    branches: [main, cloudbridge-platform]

env:
  REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  NAMESPACE: cloudbridge-staging
  HELM_CHART_PATH: helm

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [platform-main, platform-menu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [platform-main, platform-menu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-kubernetes:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cloudbridge-platform'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.0'

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes with Helm
        run: |
          for app in platform-main platform-menu; do
            helm upgrade --install $app ${{ env.HELM_CHART_PATH }}/$app \
              --namespace ${{ env.NAMESPACE }} \
              --set image.repository=${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/$app \
              --set image.tag=$(echo ${{ github.sha }} | cut -c1-7)
          done

  notify:
    needs: [deploy-to-kubernetes]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: ${{ success() }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ 배포 성공: CloudBridge 애플리케이션이 성공적으로 배포되었습니다.\n*Repo:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify on failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "❌ 배포 실패: CloudBridge 애플리케이션 배포에 문제가 발생했습니다.\n*Repo:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  analyze-with-ai:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install AI analysis tools
        run: |
          pip install openai anthropic

      - name: Run AI code review
        run: |
          python scripts/ai-code-review.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_API_KEY }} 