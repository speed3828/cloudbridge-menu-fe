name: 브랜치 동기화 자동화

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      source_branch:
        description: '소스 브랜치'
        required: true
        default: 'main'
      target_branch:
        description: '대상 브랜치'
        required: true
        default: 'staging'
      force_push:
        description: '강제 푸시 (위험)'
        required: false
        default: 'false'

jobs:
  sync-branches:
    name: 브랜치 동기화
    runs-on: ubuntu-latest
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 설정
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
      
      - name: 자동 동기화 (push 이벤트)
        if: github.event_name == 'push'
        run: |
          # 메인 브랜치를 대상 브랜치로 동기화
          echo "메인 브랜치의 변경사항을 staging 및 develop 브랜치로 동기화합니다"
          
          # staging 브랜치 동기화
          git checkout -b staging origin/staging || git checkout -b staging
          git merge origin/main --no-edit
          git push origin staging
          
          # develop 브랜치 동기화
          git checkout -b develop origin/develop || git checkout -b develop
          git merge origin/main --no-edit
          git push origin develop
          
          echo "브랜치 동기화 완료"

      - name: 수동 동기화 (workflow_dispatch 이벤트)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # 사용자가 지정한 브랜치 간 동기화
          SOURCE="${{ github.event.inputs.source_branch }}"
          TARGET="${{ github.event.inputs.target_branch }}"
          FORCE="${{ github.event.inputs.force_push }}"
          
          echo "브랜치 동기화: $SOURCE -> $TARGET"
          
          git checkout -b $TARGET origin/$TARGET || git checkout -b $TARGET
          
          if [[ "$FORCE" == "true" ]]; then
            echo "경고: 강제 푸시를 사용합니다"
            git reset --hard origin/$SOURCE
            git push --force origin $TARGET
          else
            git merge origin/$SOURCE --no-edit
            git push origin $TARGET
          fi
          
          echo "브랜치 동기화 완료: $SOURCE -> $TARGET"

      - name: 동기화 결과 알림
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const event_type = context.eventName;
            let message = "";
            
            if (event_type === 'push') {
              message = `🔄 자동 브랜치 동기화 완료: main → staging, develop`;
            } else {
              const source = context.payload.inputs.source_branch;
              const target = context.payload.inputs.target_branch;
              const force = context.payload.inputs.force_push === 'true' ? '(강제)' : '';
              message = `🔄 수동 브랜치 동기화 완료: ${source} → ${target} ${force}`;
            }
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number || 1,  // fallback to issue #1 if no issue context
              body: message
            }).catch(e => {
              console.log("코멘트를 남길 수 없습니다, 아마도 PR이 없는 경우일 수 있습니다:", e);
            }); 